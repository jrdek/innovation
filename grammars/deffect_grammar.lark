%import .common (base_color, icon, num, card_name)

%ignore /\s+/
%ignore "#" /[^\n]/*
%ignore ","

cards: card+

card: card_name "(" age base_color ")" "{" icons dogma "}"

?icons: icon~1..6

dogma: dogma_effect+

age: "[" value "]"

dogma_effect: effect_header stmts

effect_header: effect_class "(" icon ")"

effect_class: "Shared" | "Demand"

// ARGS TO STATEMENTS

dir_left: "left"
dir_right: "right"
dir_up: "up"
direction: dir_left | dir_right | dir_up

hand: "hand" "s"?
score_pile: "score pile" "s"?
achievements: "achievements"
board: "board" "s"?
top_cards: "top cards"

general_zone: hand
    | score_pile
    | achievements
    | board
    | top_cards

my: "my"
your: "your"
their: "their"
everyones: "everyone's"
everyone_elses: "everyone else's"
anyones: "anyone's"
anyone_elses: "anyone else's"

you: "you"
anyone: "anyone"
nobody: "nobody" | "no-one"
someone: "some player"

player: you
    | "the player with" count_superlative countable

specific_players: someone ("s.t. (" condition ")")? "'s"

player_adj: my
    | your
    | their
    | specific_players
    | everyones
    | anyones
    | everyone_elses
    | anyone_elses

zone: player_adj general_zone 

strictly_most: "strictly most"
strictly_fewest: "strictly fewest"
highest: "highest"
lowest: "lowest"

val_superlative: highest | lowest
count_superlative: strictly_most | strictly_fewest

// how many of which cards?
card_sel_lambda: sel_num_cards | sel_all_cards | num

sel_num_cards: "the" val_superlative? value?  // TODO: This is too permissive! "draw the card from your hand..."
sel_all_cards: "all the" val_superlative? | "all" val_superlative?

its_feature: "its" feature
its_color: "its color"

any_quant: "any of"
all_quant: "all of"
quantifier: any_quant | all_quant  // TODO: redundant?

// NOTE that this will be a bit confusing to transform later!
// this is basically a bool: is property P of card c equal to x?
// we don't use `feature` because "the card has a Red" may be different
// from "the card is Red", and "the card is Castle" is something else altogether
card_is_like: quantifier? specific_cards ("is"|"are") color_select 
    | quantifier? specific_cards ("has"|"have") "a" icon
    | card_name "is" _PREPOS zone

chosen: "chosen"

?color_select: its_color
    | base_color
    | "(" color_select ")"

actor: you | anyone | nobody

cards_transferred: actor "transferred" any_amt _CARDS

no: "no"
any: "any"
any_amt: no | any

// TODO: can this be more modular?
only_you_have_all_colors: "only you have all colors"

not_cond: "not" "(" condition ")"

at_least: "at least"
below: "below"

score: "score"
points: "points"

democracy_record: "the democracy record"

any_number_of: "any number of"

round_up: "rounded up"
round_down: "rounded_down"
round: round_up | round_down

count: "#" countable

?value: num
    | feature_of_card
    | any_number_of
    | democracy_record
    | player_adj score
    | chosen
    | count
    | value /plus/ num
    | value /times/ num
    | value /divided by/ num round?
    | val_superlative "value" _PREPOS zone
    | "(" value ")"  // sometimes it's nice to have parens for readability

compare_op: at_least | below

comparison: player_adj? value "is" compare_op? value

any_color: "any one color"  // TODO: what if I want to say "any two colors"?

any_one: "any one"

player_color_cards: player_adj color_select _CARDS
    | player_adj _CARDS "of" feature_of_card
    | any_color "of" player_adj _CARDS ("which is splayed" direction)?
    | "(" player_color_cards ")"

pile_is_splayed: player_color_cards "are splayed" direction?

cond_or_cond: condition "or" condition

cond_and_cond: condition "and" condition

same: "the same" | "its"

a_certain_feature: same feature | any_one feature

value_is_superlative: value "is" count_superlative

condition: cards_transferred 
    | only_you_have_all_colors
    | pile_is_splayed
    | card_is_like
    | comparison
    | value_is_superlative
    | not_cond
    | cond_or_cond
    | cond_and_cond
    | "(" condition ")"

it: "it" 
them: "them"

_CARDS: /cards?/

distinct_features: "distinct" feature "s" _PREPOS (them | zone)


// NOTE: base game doesn't use age here
feature: "value" | "color" | "age"


feature_of_card: its_feature
    | "the"? feature "of" specific_cards
    | specific_cards "'s" feature

countable: referent
    | points
    | kind_of_card _PREPOS zone 
    | icon _PREPOS zone
    | icon _PREPOS specific_cards
    | distinct_features
    | "(" countable ")"

card_of_certain_age: age  // you can say "draw a [10]"
card_of_certain_color: base_color kind_of_card  // but you can't say "remove a red", it has to be a "red card"
card_not_of_certain_color: "non-" base_color kind_of_card
card_with_certain_icon: kind_of_card "with" "a" icon
card_without_certain_icon: kind_of_card "without" "a" icon
card_of_certain_feature: kind_of_card "of" a_certain_feature

kind_of_card: pile_loc kind_of_card
    | card_of_certain_age
    | _CARDS
    | card_of_certain_color
    | card_not_of_certain_color
    | card_with_certain_icon
    | card_without_certain_icon
    | card_of_certain_feature

the_other_one: "the other one"

referent: it | them | chosen | the_other_one

pile_loc: "top" | "bottom"

_PREPOS: "from" | "in" | "on" | "among"

range: value | up_to_value

up_to_value: "up to" value

my_choice: "my choice"

other_than: "other than"

?specific_cards: referent
    | my_choice
    | card_sel_lambda kind_of_card (other_than card_name)? ("s.t." condition)? _PREPOS zone
    | card_sel_lambda kind_of_card "of" a_certain_feature _PREPOS zone
    | range kind_of_card _PREPOS zone
    | player_adj pile_loc base_color _CARDS
    | player_adj pile_loc _CARDS "of" a_certain_feature  // this is too permissive FIXME
    | card_sel_lambda pile_loc kind_of_card


stmts: _stmt
    | "{" (_stmt "\n")+ "}"


// KINDS OF STATEMENTS

_stmt: draw_stmt
    | return_stmt
    | transfer_stmt
    | meld_stmt
    | for_colors_with_stmt
    | if_stmt
    | you_may_stmt
    | reveal_stmt
    | repeat_stmt
    | score_stmt
    | tuck_stmt
    | exchange_stmt
    | splay_stmt
    | special_achieve_stmt
    | democracy_stmt
    | rearrange_stmt
    | win_stmt
    | choose_features_stmt
    | choose_card_stmt
    | nuke_stmt
    | end_dogma_action_stmt
    | dogma_combo_stmt


draw_stmt: "draw" range age

return_stmt: "return" specific_cards

transfer_stmt: "transfer" specific_cards "to" zone

meld_stmt: "meld" specific_cards

splay_stmt: "splay" player_color_cards direction
    | "unsplay" player_color_cards

score_stmt: "score" specific_cards

reveal_stmt: "reveal" specific_cards

// NOTE: this is intentionally overprescribed. could be reworked, but I see no need yet
for_colors_with_stmt: "for each color on your board with a" icon stmts

if_stmt: "if" condition stmts ("else" stmts)?

you_may_stmt: "you may" stmts ("or" stmts)?

repeat_stmt: "repeat this effect"

tuck_stmt: "tuck" specific_cards

exchange_stmt: "exchange" specific_cards "with" specific_cards

rearrange_stmt: "rearrange" player_color_cards

democracy_stmt: "set the democracy record"

special_achieve_stmt: "claim the" card_name "special achievement"

win_stmt: player "win" "s"?

choose_features_stmt: "choose" value feature "s"?

choose_card_stmt: "choose" specific_cards

nuke_stmt: "nuke" specific_cards

end_dogma_action_stmt: "end the dogma action"

dogma_combo_stmt: "dogma combo" 