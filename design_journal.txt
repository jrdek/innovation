Q: In the DEffect grammar, why isn't "s.t." part of the `condition` rule?
A: It's not grammatical to say "if s.t. (your board has a red card) {...}"! It might be more elegant to eventually make a rule specifically for the "clarifying clause" which is just "s.t. ( `condition` )", though. 

Q: I had ?condition before. Why did I remove that?
A: If we don't have a condition node, it's a little harder to keep track of the well-typedness, especially once we translate into an IR. The syntax tree is a little hairier, but in exchange I'm less likely to mess up my programming in a hard-to-catch way.
Incidentally, this same logic is used for general_zone.

Q: Why is there no expr type in the syntax?!?!?!
A: Because nothing in the "language" can semantically accept all kinds of expressions.

Q: Why do we have both ACTOR and PLAYER?
A: This was a workaround to get "If no cards were transferred due to this effect" working nicely. We have both "anyone" and "nobody" because I didn't feel like forcing the card implementer (me) to deal with DeMorgan's laws. (Same reason ANY_AMT has two constructors.)

Q: Why no arithmetic expression rule? (plus, times, and div are all part of the `value` rule)
A: They're only ever used there. Didn't feel the need.

Q: What's the deal with `value` and `card_sel_lambda` both having VAL_SUPERLATIVE?
A: `value` is a numeric type. `card_sel_lambda` is of type Board -> Card.

---

Q: Why are DogmaEffects interpreted?
A: A very clean idea for representing card behavior is to have DogmaEffects just be functions from GameState to GameState. Unfortunately, there's a tough bit to design around: PlayerAgents often need to make choices in the middle of an effect, *when invoking it*. Moreover, sometimes optimal strategy for one choice in an effect relies on an earlier choice (or at least, fundamentally, it could).
- If dogmas are turned into List[Callable[[GameState], GameState]] at load-time, choices don't work.
- If we store both (1) choices to be made over the course of the effect and (2) the effect with a placeholder for "next choice", then ordering is lost: all choices need to be supplied immediately when doing the dogma action.
By storing DogmaEffects as trees and traversing them live, the traverser (the interpreter) can query PlayerAgents live and sequentially. This gets rid of the problem.

---
Problem: A hand is a set of cards... but Card isn't a hashable type! It has Lists in it.
Possible solutions:
    - make hands, boards, etc into Lists -- no need for hashing
        - this will be less annoying to implement, I think
    - replace all mutable fields of Card with immutable ones (FrozenList, etc)
        - this will be annoying to implement

---
Vital observation: terminals with multiple constructors should have a parent non-terminal!
This way we can transform them easily.


------

Initial game workflow sketch:

When a player (or rather, a Player agent) uses a card's dogma, the dogma effects will be executed in order. Notably, some of these effects will involve asking PlayerAgents for choices. 

In particular, here's how the execution flow should look:

1a. The Director asks the PlayerAgent whose turn it is what action they'd like to take (drawing a card, melding a card, using a dogma, or claiming an achievement). In so asking, the Director also gives that Agent the current GameState. The agent can analyze the GameState however it wants, but it may not mutate it -- the "current state" lives in the Director, and only the Director can modify it.

1b. The agent responds with an action.

2. The Director invokes the action. Assuming the request is valid, this (eventually) provides the Director with a list of functions which compose into something taking a GameState and returning a GameState.

3. The Director updates its "current state" by applying the function made in step 2.

4. If the game is not over, the Director updates the active player (if needed) and returns to step 1a.

~~

Requests to draw, meld, and achieve are simple both to validate and to "compile". So let's suppose the active player requests a dogma action. Then step 2 above looks like this:

1. The Director checks to see if one of the top cards on that player's board (that is, one of the Card objects at the "top" of one of the Pile objects on that player's Board in the current GameState) has the given name. If not, it throws an error.

2. For each dogma effect in that Card's Dogma (list of DogmaEffects):

2a. For each player (starting with the next player, ending with the current player), the Director checks if that player is subject to the dogma effect (according to icon counting). If they are:

2b. The Director instantiates a DogmaEffectInterpreter, which walks the IR tree for that dogma effect and evaluates (and eventually returns) the list of functions to be applied to the GameState after that player executes the DogmaEffect. If the interpreter ever hits a node which requires agent choice, it takes a snapshot of the GameState with all changes from the DogmaEffect's statements so far applied, hands the relevant PlayerAgent(s) that snapshot for information, and asks them to make the relevant choice(s).
Note that a smart PlayerAgent should be able to analyze future possible GameStates! This means agents should be able to use the DogmaEffectInterpreter however they'd like. Again, though, only the Director is able to modify the "current GameState".



TODO: Do cards actually need an `owner` field?
If I am choosing a card from your score pile, I can only see its age.
This might be accomplished by *me* using a restricted view function... but then an agent could cheat!
This functionality should instead live in either the card or the container.
Consider:
    The interpreter reads that "you" are to choose a card from "my" score pile.
    It queries your PlayerAgent for that choice, so "you" get the current GameState.

4/4: I'm removing the `owner` and `faceup` fields. 
"Reveal <card C>", when interpreted, should 
    - compile the GameState,
    - "message" all PlayerAgents that C is in whatever location it's in, letting them update their models of the world however they want,
    - and continue interpreting.